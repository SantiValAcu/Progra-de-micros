/*
 * Lab4.c
 *
 * Created: 2/4/2025
 * Author: Santiago Valdez Acuña
 * Description: Configuración del ADC2 para leer el valor de un potenciometro, y despliegar
 el valor del ADC en formato hexadecimal en dos displays de 7 segmentos
 */ 
/****************************************/
// Encabezado (Libraries)
#include <avr/io.h>
#include <avr/interrupt.h>
// Nombres variables 
uint8_t contador;
uint8_t adc_val = 0x00;
uint8_t display_sel = 0;
uint8_t tabla[] = {0xF7, 0x31, 0xDB, 0x7B, 0x3D, 0x7E, 0xFE, 0x33, 0xFF, 0x7F, 0xBF, 0xFC, 0xD6, 0xF9, 0xDE, 0x9E};
/****************************************/
// Function prototypes
void setup();
void init_ADC();
void update_display(uint8_t value);
/****************************************/
// Main Function
int main(void)
{
	setup();		// configurar MCU
    while (1) 
    {
    }
}
/****************************************/
// NON-Interrupt subroutines
void setup(){
	cli();										// Desactivar interrupciones globales
	UCSR0B = 0x00;								// desactivar comunicación serial
	// Configurar PORTD como salida
	DDRD    = 0xFF;
	PORTD   = 0x00;								// Inicializar LEDs en 0
	// Configurar PC0 y PC1 como salida (para transistores)
	DDRC |= (1 << PC0) | (1 << PC1);
	PORTC &= ~((1 << PC0) | (1 << PC1));		// Apagar transistores al inicio
	// Configurar Timer0 para multiplexado de displays (prescaler 64)
	TCCR0A = 0x00;								// Modo normal
	TCCR0B |= (1 << CS01) | (1 << CS00);		// Prescaler de 64
	TIMSK0 |= (1 << TOIE0);						// Habilitar interrupción por desbordamiento del Timer0
	// Configurar ADC en canal 2 (PC2)
	init_ADC();
	ADCSRA |= (1 << ADSC);						// Iniciar la primera conversión
	sei();										// Habilitar interrupciones globales
}

// Configurar ADC en canal 2
void init_ADC() {
	ADMUX = 0;
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1);					// AVCC, left adjust, ADC2
	ADCSRA = 0;
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1) | (1 << ADPS0);	// Habilitar ADC con prescaler 8
}
/****************************************/
// Interrupt routines

// Interrupción del ADC (actualiza el valor leído)
ISR(ADC_vect) {
	adc_val = ADCH;			// Leer parte alta del ADC (8 bits)
	ADCSRA |= (1 << ADSC);  // Iniciar nueva conversión
}

// Interrupción del Timer0 (Multiplexado de displays)
ISR(TIMER0_OVF_vect) {
	update_display(adc_val);
}

// Multiplexado de los displays de 7 segmentos
void update_display(uint8_t value) {
	uint8_t unidades = value & 0x0F;  // Último dígito en hex
	uint8_t decenas = (value >> 4) & 0x0F;  // Primer dígito en hex

	if (display_sel == 0) {
		PORTC &= ~(1 << PC1);  // Apagar decenas
		PORTC |= (1 << PC0);   // Encender unidades
		PORTD = tabla[unidades];
		} else {
		PORTC &= ~(1 << PC0);  // Apagar unidades
		PORTC |= (1 << PC1);   // Encender decenas
		PORTD = tabla[decenas];
	}
	display_sel = !display_sel;  // Alternar entre displays
}
